<% provide(:title, 'Les liens entre les thèmes') %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
<script>
    //*******************************************************************
    //  CHORD MAPPER
    //*******************************************************************
    function chordMpr(data) {
        var mpr = {}, mmap = {}, n = 0,
                matrix = [], filter, accessor;

        mpr.setFilter = function (fun) {
            filter = fun;
            return this;
        },
                mpr.setAccessor = function (fun) {
                    accessor = fun;
                    return this;
                },
                mpr.getMatrix = function () {
                    matrix = [];
                    _.each(mmap, function (a) {
                        if (!matrix[a.id]) matrix[a.id] = [];
                        _.each(mmap, function (b) {
                            var recs = _.filter(data, function (row) {
                                return filter(row, a, b);
                            })
                            matrix[a.id][b.id] = accessor(recs, a, b);
                        });
                    });
                    return matrix;
                },
                mpr.getMap = function () {
                    return mmap;
                },
                mpr.printMatrix = function () {
                    _.each(matrix, function (elem) {
                    })
                },
                mpr.addToMap = function (value, info) {
                    if (!mmap[value]) {
                        mmap[value] = {name: value, id: n++, data: info}
                    }
                },
                mpr.addValuesToMap = function (varName, info) {
                    var values = _.uniq(_.pluck(data, varName));
                    _.map(values, function (v) {
                        if (!mmap[v]) {
                            mmap[v] = {name: v, id: n++, data: info}
                        }
                    });
                    return this;
                }
        return mpr;
    }
    //*******************************************************************
    //  CHORD READER
    //*******************************************************************
    function chordRdr(matrix, mmap) {
        return function (d) {
            var i, j, s, t, g, m = {};
            if (d.source) {
                i = d.source.index;
                j = d.target.index;
                s = _.where(mmap, {id: i});
                t = _.where(mmap, {id: j});
                m.sname = s[0].name;
                m.sdata = d.source.value;
                m.svalue = +d.source.value;
                m.stotal = _.reduce(matrix[i], function (k, n) {
                    return k + n
                }, 0);
                m.tname = t[0].name;
                m.tdata = d.target.value;
                m.tvalue = +d.target.value;
                m.ttotal = _.reduce(matrix[j], function (k, n) {
                    return k + n
                }, 0);
            } else {
                g = _.where(mmap, {id: d.index});
                m.gname = g[0].name;
                m.gdata = g[0].data;
                m.gvalue = d.value;
            }
            m.mtotal = _.reduce(matrix, function (m1, n1) {
                return m1 + _.reduce(n1, function (m2, n2) {
                            return m2 + n2
                        }, 0);
            }, 0);
            return m;
        }
    }
</script>

<style>
    #tooltip {
        color: white;
        opacity: .9;
        background: #333;
        padding: 5px;
        border: 1px solid lightgrey;
        border-radius: 3px;
        position: absolute;
        z-index: 10;
        visibility: hidden;
        white-space: nowrap;
        pointer-events: none;
    }

    #circle circle {
        fill: none;
        pointer-events: all;
    }

    .chord {
        opacity: .4 !important;
        stroke: #000;
    }

    .fade {
        opacity: 0.9 !important;
    }
</style>
<div class="side-bar-top">
  <%= link_to "<span class=\"icon-arrow-left normal\"></span> #{t('views.navigation.back_timelines')}".html_safe,
              timelines_path, class: "btn btn-default" %>
</div>
<div class="side-bar-right">
  <%= link_to "<span class=\"icon-versus\"></span> Pluridisciplinarité des controverses".html_safe,
              tag_pairs_graph_path(:timeline => true), class: "btn btn-default #{params[:timeline] == "true" ? "active" : nil }" %>
  <br><br>
  <%= link_to "<span class=\"icon-versus\"></span> Pluridisciplinarité des références".html_safe,
              tag_pairs_graph_path(:reference => true), class: "btn btn-default #{params[:timeline] == "true" ? nil : "active"}" %>
</div>
<div id="d3-graph">
  <div id="tooltip" style="visibility: hidden;"></div>
</div>
<script>
    //*******************************************************************
    //  CREATE MATRIX AND MAP
    //*******************************************************************
    d3.csv('/<%= params[:timeline] == "true" ? "timeline" : "reference" %>-pairs.csv', function (error, data) {
        var mpr = chordMpr(data);

        mpr
                .addValuesToMap('source')
                .setFilter(function (row, a, b) {
                    return (row.source === a.name && row.target === b.name)
                })
                .setAccessor(function (recs, a, b) {
                    if (!recs[0]) return 0;
                    return +recs[0].count;
                });
        drawChords(mpr.getMatrix(), mpr.getMap());
    });
    //*******************************************************************
    //  DRAW THE CHORD DIAGRAM
    //*******************************************************************
    function drawChords(matrix, mmap) {
        var tag_hash = <%= raw tags_hash.to_json %>;

        var w = $(window).width(),
                h = $(window).height() - 125,
                r1 = h / 2,
                r0 = r1 - 120;

        var fill = d3.scale.ordinal()
                .domain(d3.range(4))
                .range(["#0b84a5", "#aed688", "#f5c767", "#ffa056", "#ca472f"]);

        var chord = d3.layout.chord()
                .padding(.02)
                .sortSubgroups(d3.descending)
                .sortChords(d3.descending);

        var arc = d3.svg.arc()
                .innerRadius(r0)
                .outerRadius(r0 + 20);

        var svg = d3.select("#d3-graph").append("svg:svg")
                .attr("width", w)
                .attr("height", h)
                .attr("class", "img-responsive")
                .append("svg:g")
                .attr("id", "circle")
                .attr("transform", "translate(" + w / 2 + "," + h / 2 + ")");

        svg.append("circle")
                .attr("r", r0 + 40)
                .style("fill", "#FFFFFF");

        var rdr = chordRdr(matrix, mmap);
        chord.matrix(matrix);

        var g = svg.selectAll("g.group")
                .data(chord.groups())
                .enter().append("svg:g")
                .attr("class", "group")
                .on("mouseover", mouseover)
                .on("mouseout", function (d) {
                    d3.select("#tooltip").style("visibility", "hidden");
                    chordPaths.classed("fade", false)
                });

        g.append("svg:path")
                .style("stroke", "black")
                .style("fill", function (d) {
                    return fill(d.index);
                })
                .attr("d", arc);

        g.append("svg:text")
                .each(function (d) {
                    d.angle = (d.startAngle + d.endAngle) / 2;
                })
                .attr("dy", ".35em")
                .attr("text-anchor", function (d) {
                    return d.angle > Math.PI ? "end" : null;
                })
                .attr("transform", function (d) {
                    return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
                            + "translate(" + (r0 + 26) + ")"
                            + (d.angle > Math.PI ? "rotate(180)" : "");
                })
                .text(function (d) {
                    return tag_hash[rdr(d).gname];
                });

        var chordPaths = svg.selectAll("path.chord")
                .data(chord.chords())
                .enter().append("svg:path")
                .attr("class", "chord")
                .style("stroke", function (d) {
                    if (d.source == d.target){
                        return d3.rgb(fill(d.target.index)).darker();
                    } else {
                        return "#acacac";
                    }
                })
                .style("fill", function (d) {
                    if (d.source == d.target){
                        return fill(d.target.index);
                    } else {
                        return "#cccccc";
                    }
                })
                .attr("d", d3.svg.chord().radius(r0))
                .on("mouseover", function (d) {
                    d3.select("#tooltip")
                            .style("visibility", "visible")
                            .html(chordTip(rdr(d)))
                            .style("top", function () {
                                return (d3.event.pageY - 100) + "px"
                            })
                            .style("left", function () {
                                return (d3.event.pageX - 100) + "px";
                            });
                    chordPaths.classed("fade", function (p) {
                        return (p.source.index == d.source.index && p.target.index == d.target.index);
                    });
                })
                .on("mouseout", function (d) {
                    d3.select("#tooltip").style("visibility", "hidden");
                    chordPaths.classed("fade", false)
                });

        function chordTip(d) {
            var p = d3.format(".2%"), q = d3.format(",.3r");
            return (d.sname === d.tname ?
                    ("<span class='bigger icon icon-" + d.sname + "'></span> <%=params[:timeline] == "true" ? "Controverses" : "Références" %> en " + tag_hash[d.sname] + " : <br/>" +
                    p(d.svalue / d.stotal) + " sont à thème unique" ) :
                    ("<span class='bigger icon icon-" + d.sname + "'></span> <%=params[:timeline] == "true" ? "Controverses" : "Références" %> en " + tag_hash[d.sname] + " : <br/>" +
                    p(d.svalue / d.stotal) + " sont associées au thème " + tag_hash[d.tname] + " (<span class='normal icon icon-" + d.tname + "'></span>)"
                    + "<br/><br/>" + "<span class='bigger icon icon-" + d.tname + "'></span> <%=params[:timeline] == "true" ? "Controverses" : "Références" %> en " + tag_hash[d.tname] + " : <br/>" +
                    p(d.tvalue / d.ttotal) + " sont associées au thème " + tag_hash[d.sname] + " (<span class='normal icon icon-" + d.sname + "'></span>)" ));
        }

        function groupTip(d) {
            var p = d3.format(".1%"), q = d3.format(",.3r");
            return "<span class='icon icon-" + d.gname + "'></span> <%=params[:timeline] == "true" ? "Controverses" : "Références" %> en " + tag_hash[d.gname] + "<br/>"
                    + p(d.gvalue / d.mtotal) + " du total"
        }

        function mouseover(d, i) {
            d3.select("#tooltip")
                    .style("visibility", "visible")
                    .html(groupTip(rdr(d)))
                    .style("top", function () {
                        return (d3.event.pageY - 80) + "px"
                    })
                    .style("left", function () {
                        return (d3.event.pageX - 130) + "px";
                    });

            chordPaths.classed("fade", function (p) {
                return !(p.source.index != i && p.target.index != i);
            });
        }
    }
</script>