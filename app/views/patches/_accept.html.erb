<script type="text/javascript">

    function diffs_to_content(in_diffs) {
        return $.map(in_diffs, function (diff, i) {
            switch (diff[0]) {
                case DIFF_INSERT:
                    return '';
                case DIFF_DELETE:
                    return diff[1];
                case DIFF_EQUAL:
                    return diff[1];
            }
        }).join('')
    }

    function countCharacters(text) {
        var out = text.replace(/\[\*\]\([0-9]*\)/g, '')
            .replace(/\]\(\/timelines\/[0-9]*\)/g, '')
            .replace(/\]\((?:(?:https?|\(ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9]+-?)*[a-z0-9]+)(?:\.(?:[a-z0-9]+-?)*[a-z0-9]+)*(?:\.(?:[a-z]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?\)/g, '')
            .replace(/\*|\^|_|\(|\)|\[|\]|-/g, '')
            .replace(/[0-9]\. /g, '');
        return out.length
    }

    function set_char(len, min, max, $charleft, $accept, $restart, first) {
        if (len >= max) {
            $charleft.css({"color": "#a94442"});
            $charleft.text((len - max) + ' <%= t('views.edition.character_much') %>');
            $accept.hide();
            $restart.show();
        } else if (len <= min) {
            $charleft.css({"color": "#a94442"});
            $charleft.text('<%= t('views.default.at_least') %> ' + (min - len) + ' <%= t('views.edition.character_miss') %>');
            $accept.hide();
            $restart.show();
        } else {
            $charleft.css({"color": "#5cb85c"});
            $charleft.text((max - len) + ' <%= t('views.edition.character_left') %>');
            if (!first) {
                $accept.show();
                $restart.show();
            } else {
                $accept.hide();
                $restart.hide();
            }
        }
    }

    function initialize(settings, dmp, cont) {
        var changed, diffs, original, patches;
        $(settings.diffContainer, cont).html('');
        original = $(settings.originalContainer, cont).text();
        patches = dmp.patch_fromText($(settings.changedContainer, cont).text());
        changed = dmp.patch_apply(patches, original)[0];
        diffs = dmp.diff_main(original, changed);
        dmp.diff_cleanupSemantic(diffs);
        $.fn.prettyTextDiff.fillContainer(diffs, settings, cont, dmp, true)
    }

    (function () {
        $.fn.extend({
            prettyTextDiff: function (options) {
                var dmp, settings;
                settings = {
                    originalContainer: ".original",
                    changedContainer: ".changed",
                    diffContainer: ".diff",
                    cleanup: true
                };
                settings = $.extend(settings, options);
                dmp = new diff_match_patch();
                return this.each(function () {
                    var self;
                    self = this;
                    $("#reset-patches", this).on("click", function () {
                        initialize(settings, dmp, self);
                    });
                    initialize(settings, dmp, self);
                    return this;
                });
            }
        });

        $.fn.prettyTextDiff.fillContainer = function (diffs, settings, self, dmp, first) {
            var diff_as_html = $.map(diffs, function (diff, i) {
                return $.fn.prettyTextDiff.createHTML(diff, i, diffs);
            });
            $(settings.diffContainer, self).html(diff_as_html.join(''));
            $(".patch-validate", self).off();
            $("#accept-patches", self).off();
            $(".patch-refuse", self).off();

            var $charLeft;
            $charLeft = $("#charLeft", self);
            set_char(countCharacters(diffs_to_content(diffs)),
                parseInt($charLeft.data('min-len')),
                parseInt($charLeft.data('max-len')),
                $charLeft,
                $("#accept-patches", self),
                $("#reset-patches", self),
                first);
            // Re-add event handler for all matching elements
            $(".patch-validate", self).on("click", function () {
                var diff, index;
                index = parseInt($(this).data('id'));
                diff = diffs[index];
                switch (diff[0]) {
                    case DIFF_INSERT:
                        diff[0] = 0;
                        if (index !== 0 && diffs[index - 1][0] === DIFF_DELETE) {
                            diffs.splice(index - 1, 1);
                        }
                        $.fn.prettyTextDiff.fillContainer(diffs, settings, self, dmp, false);
                        return true;
                    case DIFF_DELETE:
                        diffs.splice(index, 1);
                        $.fn.prettyTextDiff.fillContainer(diffs, settings, self, dmp, false);
                        return true;
                }
            });
            $(".patch-refuse", self).on("click", function () {
                var diff, index;
                index = parseInt($(this).data('id'));
                diff = diffs[index];
                switch (diff[0]) {
                    case DIFF_INSERT:
                        if (index !== 0 && diffs[index - 1][0] === DIFF_DELETE) {
                            diffs[index - 1][0] = 0;
                        }
                        diffs.splice(index, 1);
                        $.fn.prettyTextDiff.fillContainer(diffs, settings, self, dmp, false);
                        return true;
                    case DIFF_DELETE:
                        diff[0] = 0;
                        $.fn.prettyTextDiff.fillContainer(diffs, settings, self, dmp, false);
                        return true;
                }
            });
            $("#accept-patches", self).on("click", function () {
                var $this = $(this);
                $this.hide();
                $('#fail', self).hide();
                $('#fail', self).hide();
                $this.after('<svg version="1.1" class="loader-like" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="40px" height="40px" viewBox="0 0 50 50" style="enable-background:new 0 0 50 50;" xml:space="preserve"> <path fill="#000" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z"> <animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite"/></path></svg>');
                var new_content, patches, patchesText;
                patches = dmp.patch_make(diffs).filter(function( obj ) {
                  return obj.diffs[1][1] !== '';
                });
                patchesText = dmp.patch_toText(patches);
                new_content = diffs_to_content(diffs);
                $.ajax({
                    url: $this.data('validate'),
                    data: {
                        frame_id: $this.data('frame-id'),
                        comment_id: $this.data('comment-id'),
                        summary_id: $this.data('summary-id'),
                        field: $this.data('field'),
                        counter: patches.length,
                        content: patchesText,
                        parent_content: new_content
                    },
                    method: 'POST'
                })
                .done(function(data, textStatus, jqXHR ) {
                    $('#done', self).show();
                    $(settings.originalContainer, self).text(new_content);
                    $(settings.changedContainer, self).text(patchesText);
                    initialize(settings, dmp, self);
                })
                .fail(function( jqXHR, textStatus, errorThrown ) {
                    $('#fail', self).show();
                })
                .always(function( data_jqXHR, textStatus, jqXHR_errorThrown ) {
                    $('.loader-like').remove();
                });

            });
            return true
        };
        $.fn.prettyTextDiff.createHTML = function (diff, i, diffs) {
            var data, operation, pattern_amp, pattern_gt, pattern_lt, pattern_para, text, diffId, patchClick;
            diffId = ' data-id="' + i + '"';
            patchClick = '<span class="validations-checkox"><span class="inside">' +
                    '<span class="patch-refuse"' + diffId + '> <span class="glyphicon glyphicon-remove"></span> </span>' +
                    '<span class="patch-validate"' + diffId + '> <span class="glyphicon glyphicon-ok"></span> </span>' +
                    '</span></span>';
            pattern_amp = /&/g;
            pattern_lt = /</g;
            pattern_gt = />/g;
            pattern_para = /\n/g;
            operation = diff[0];
            data = diff[1];
            if (data !== '') {
                text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;').replace(pattern_gt, '&gt;').replace(pattern_para, '<br>');
                switch (operation) {
                    case DIFF_INSERT:
                        return '<ins>' + text + '</ins>' + patchClick;
                    case DIFF_DELETE:
                        if ((i !== (diffs.length - 1)) && (diffs[i + 1][0] === DIFF_INSERT)) {
                            return '<del>' + text + '</del>';
                        } else {
                            return '<del>' + text + '</del>' + patchClick;
                        }
                    case DIFF_EQUAL:
                        return '<span' + diffId + '>' + text + '</span>';
                }
            }
        };

    }).call(this);
    $(".pretty").prettyTextDiff({
        cleanup: true,
        originalContainer: "#original",
        changedContainer: "#patches",
        diffContainer: "#diff"
    });
</script>