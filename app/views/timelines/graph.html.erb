<% provide(:title, 'Le graphe des controverses') %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>

<div class="side-bar-top">
  <%= link_to "<span class=\"icon-arrow-left normal\"></span> #{t('views.navigation.back_timelines')}".html_safe,
              timelines_path, class: "btn btn-default" %>
</div>

<div class="side-bar">
  <div class="clearfix">
    <span class="graph-caption">
      <%= t('views.timelines.timelines_staging') %>
    </span>
    <div class="graph-circle pull-left" style="background-color: rgb(174, 199, 232);"></div>
  </div>
  <br>

  <div class="clearfix">
    <span class="graph-caption">
       <%= t('views.timelines.timelines_built') %>
    </span>
    <div class="graph-circle pull-left" style="background-color: rgb(31, 119, 180);"></div>
  </div>
</div>

<span id="d3-graph"></span>
<script type="text/javascript">
    $('.my-btn').responsiveEqualHeightGrid();
    var margin = {top: 0, right: 0, bottom: 0, left: 0},
            width = $(window).width(),
            height = $(window).height() - 125;

    var zoom = d3.behavior.zoom()
            .scaleExtent([1, 10])
            .on("zoom", zoomed);

    var color = d3.scale.category20();

    var force = d3.layout.force()
            .linkDistance(10)
            .linkStrength(2)
            .size([width, height]);

    var svg = d3.select("#d3-graph").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.right + ")")
            .call(zoom);

    var rect = svg.append("rect")
            .attr("width", width)
            .attr("height", height)
            .style("fill", "none")
            .style("pointer-events", "all");

    var container = svg.append("g");

    d3.json("/timelines_network", function (error, graph) {
        if (error) throw error;
        var nodes = graph.nodes.slice(),
                links = [],
                bilinks = [];
        graph.links.forEach(function (link) {

            var s = nodes.filter(function (n) {
                        return n.id === link.source;
                    })[0],
                    t = nodes.filter(function (n) {
                        return n.id === link.target;
                    })[0],
                    i = {}; // intermediate node
            nodes.push(i);
            links.push({source: s, target: i}, {source: i, target: t});
            bilinks.push([s, i, t]);
        });
        force
                .nodes(nodes)
                .links(links)
                .start();
        var link = container.selectAll(".link")
                .data(bilinks)
                .enter().append("path")
                .attr("class", "link");
        var node = container.selectAll(".node")
                .data(graph.nodes)
                .enter().append("a")
                .attr("xlink:href", function (d) {
                    return d.url;
                })
                .attr("target", "_blank")
                .append("circle")
                .attr("class", "node")
                .attr("r", function (d) {
                    return 3 * d.size;
                })
                .style("fill", function (d) {
                    return color(d.group);
                })
                .call(force.drag);
        node.attr("title", function (d) {
            return $('<div/>').html(d.name).text();
        });
        node.attr("data-toggle", "tooltip");
        force.on("tick", function () {
            link.attr("d", function (d) {
                return "M" + d[0].x + "," + d[0].y
                        + "S" + d[1].x + "," + d[1].y
                        + " " + d[2].x + "," + d[2].y;
            });
            node.attr("transform", function (d) {
                return "translate(" + d.x + "," + d.y + ")";
            });
            $('[data-toggle="tooltip"]').tooltip({container: 'body'});
        });
    });

    function zoomed() {
        container.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
    }
</script>