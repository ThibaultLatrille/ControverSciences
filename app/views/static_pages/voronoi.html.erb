<% provide(:title, "Voronoi") %>

<%= javascript_include_tag 'voronoi.js' %>

<script id="script" type="text/javascript">

    var palette = ["#0b84a5", "#aed688", "#f5c767", "#ffa056"];

    var VoronoiDemo = {
        voronoi: new Voronoi(),
        sites: [],
        diagram: null,
        margin: 100,
        canvas: null,
        bbox: {xl: 0, xr: 800, yt: 0, yb: 800},

        normalizeEventCoords: function (target, e) {
            // http://www.quirksmode.org/js/events_properties.html#position
            // =====
            if (!e) {
                e = self.event;
            }
            var x = 0;
            var y = 0;
            if (e.pageX || e.pageY) {
                x = e.pageX;
                y = e.pageY;
            }
            else if (e.clientX || e.clientY) {
                x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
            }
            // =====
            return {x: x - target.offsetLeft, y: y - target.offsetTop};
        },

        init: function () {
            var me = this;
            this.canvas = document.getElementById('voronoiCanvas');
            this.canvas.onmousemove = function (e) {
                if (!me.sites.length) {
                    return;
                }
                var site = me.sites[0];
                var mouse = me.normalizeEventCoords(me.canvas, e);
                site.x = mouse.x;
                site.y = mouse.y;
                me.diagram = me.voronoi.compute(me.sites, me.bbox);
                me.render();
            };
            this.canvas.onclick = function (e) {
                var mouse = me.normalizeEventCoords(me.canvas, e);
                me.addSite(mouse.x, mouse.y);
                me.render();
            };
            this.randomSites(10, true);
            this.render();
        },

        clearSites: function () {
            // we want at least one site, the one tracking the mouse
            this.sites = [{x: 0, y: 0}];
            this.diagram = this.voronoi.compute(this.sites, this.bbox);
        },

        getNeighbors: function (site) {

            var cell = this.diagram.cells[site.voronoiId];
            cell.getNeighborIds()
        },

        randomSites: function (n, clear) {
            if (clear) {
                this.sites = [];
            }
            var xo = this.margin;
            var dx = this.canvas.width - this.margin * 2;
            var yo = this.margin;
            var dy = this.canvas.height - this.margin * 2;
            for (var i = 0; i < n; i++) {
                this.addSite(self.Math.round(xo + self.Math.random() * dx),
                        self.Math.round(yo + self.Math.random() * dy));
            }
        },

        addSite: function (x, y) {
            var sites = this.sites.slice(0);
            sites.push({x: x, y: y});
            var diagram = this.voronoi.compute(sites, this.bbox);
            var site = sites[sites.length - 1];
            var neighbors = diagram.cells[site.voronoiId].getNeighborIds();
            if (neighbors.length > 3) {
            } else {
                var excludePalette = palette.slice(0), nNeighbors = neighbors.length;
                while (nNeighbors--) {
                    var cell = this.diagram.cells[neighbors[nNeighbors]];
                    console.log("bim");
                    if (cell) {
                        excludePalette = $(excludePalette).filter(function( idx ) {
                            return excludePalette[idx] != cell.site.color;
                        });
                    }
                }
                var color = excludePalette[Math.floor((Math.random() * excludePalette.length))];
                this.sites.push({x: x, y: y, color: color});
                this.diagram = this.voronoi.compute(this.sites, this.bbox);
            }
        },

        render: function () {
            var ctx = this.canvas.getContext('2d');
            // background
            ctx.globalAlpha = 1;
            ctx.beginPath();
            ctx.rect(0, 0, this.canvas.width, this.canvas.height);
            ctx.fillStyle = '#fff';
            ctx.fill();
            ctx.strokeStyle = '#000';
            ctx.stroke();
            // voronoi
            if (!this.diagram) {
                return;
            }
            ctx.strokeStyle = '#000';
            // edges
            var edges = this.diagram.edges,
                    nEdges = edges.length,
                    v;
            if (nEdges) {
                var edge;
                ctx.beginPath();
                while (nEdges--) {
                    edge = edges[nEdges];
                    v = edge.va;
                    ctx.moveTo(v.x, v.y);
                    v = edge.vb;
                    ctx.lineTo(v.x, v.y);
                }
                ctx.stroke();
            }
            // highlight cell under mouse
            var sites = this.sites, cell,
                    nSites = sites.length;
            if (!nSites) {
                return;
            }
            while (nSites--) {
                site = sites[nSites];
                cell = this.diagram.cells[site.voronoiId];
                if (cell) {
                    var halfedges = cell.halfedges,
                            nHalfedges = halfedges.length;
                    if (nHalfedges > 2) {
                        v = halfedges[0].getStartpoint();
                        ctx.beginPath();
                        ctx.moveTo(v.x, v.y);
                        for (var iHalfedge = 0; iHalfedge < nHalfedges; iHalfedge++) {
                            v = halfedges[iHalfedge].getEndpoint();
                            ctx.lineTo(v.x, v.y);
                        }
                        ctx.fillStyle = site.color;
                        ctx.fill();
                        ctx.strokeStyle = '#000';
                        ctx.stroke();
                    }
                }
            }
            ctx.fill();
        }
    };
    $(document).ready(function () {
        VoronoiDemo.init();
    });
</script>

<div id="my-container" class="container-fluid">
  <div class="col-xs-12 col-lg-8 col-lg-offset-2">
    <div class="panel panel-default">
      <div class="row">
        <div class="col-xs-12 col-md-10 col-lg-offset-1">

          <div>

            <div id="divroot" style="width:800px;">
              <h4 class="divhdr">Sites generator</h4>

              <div class="divinfo" id="voronoiGenerator">
                <input type="button" value="Generate" onclick="VoronoiDemo.randomSites(parseInt(document.getElementById('voronoiNumberSites').value,10),true);VoronoiDemo.render();"/>
                or
                <input type="button" value="Add" onclick="VoronoiDemo.randomSites(parseInt(document.getElementById('voronoiNumberSites').value,10),false);VoronoiDemo.render();"/><input id="voronoiNumberSites" type="text" value="10" size="5" maxlength="5"/>
                sites randomly (Warning: performance might suffer the more sites you add.)
                <br/><input id="voronoiClearSites" type="button" value="Clear all sites" onclick="VoronoiDemo.clearSites();VoronoiDemo.render();"/>
              </div>
              <h4 class="divhdr">Canvas</h4>

              <div id="canvasParent">
                <noscript>You need to enable Javascript in your browser for this page to display properly.</noscript>
                <canvas id="voronoiCanvas" style="cursor:crosshair" width="800" height="800"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>