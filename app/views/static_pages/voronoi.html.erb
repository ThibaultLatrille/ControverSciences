<% provide(:title, "Voronoi") %>

<%= javascript_include_tag 'voronoi.js' %>

<script type="text/javascript">

</script>

<script id="script" type="text/javascript">

    var palettess = [
        ["#F9ED69", "#F08A5D", "#B83B5E", "#6A2C70"],
        ["#2B2E4A", "#E84545", "#903749", "#53354A"],
        ["#48466D", "#3D84A8", "#46CDCF", "#ABEDD8"],
        ["#2D4059", "#EA5455", "#F07B3F", "#FFD460"],
        ["#EB586F", "#D8E9F0", "#4AA0D5", "#454553"],
        ["#FF5335", "#DFE0D4", "#3E92A3", "#353940"],
        ["#0C2233", "#065471", "#f5c767", "#ffa056"],
        ["#EEFCA9", "#B7E576", "#83CC61", "#5A9E7C"],
        ["#384137", "#406661", "#3BB873", "#94ED88"],
        ["#081F37", "#5FC9F3", "#2E79BA", "#1E549F"],
        ["#FF6464", "#FFBD67", "#F8FE85", "#5BE7A9"],
        ["#EB2A5D", "#FF6F41", "#FFB44B", "#FFEB7D"],
        ["#F35F5F", "#CC435F", "#F1EA65", "#36A3EB"],
        ["#FF9234", "#FFCD3C", "#FAFCB4", "#B0DB72"],
        ["#2C5460", "#BBDC2F", "#61B136", "#CBE0E0"],
        ["#1B4B4D", "#F3F66F", "#F1D15F", "#E8984A"],
        ["#422B72", "#266D98", "#3CB29A", "#C4F080"],
        ["#FFE0A3", "#E18237", "#943939", "#6A2634"],
        ["#D93153", "#EB5033", "#FF9D00", "#FFD82C"],
        ["#FBE0D8", "#4D727E", "#283644", "#7A6552"],
        ["#FEED30", "#FF6868", "#924992", "#504077"],
        ["#5D697A", "#383838", "#F66B34", "#F2D639"],
        ["#217756", "#63B75D", "#B0D553", "#FCED25"],
        ["#FADB3F", "#ECF7C5", "#EA5656", "#27332D"]
    ];

    var images = [];

    <% (1..55).each do |i| %>
    images.push("<%= path_to_image "clipping/path#{i}.png" %>");
    <% end %>

    var VoronoiDemo = {
        voronoi: new Voronoi(),
        sites: [],
        diagram: null,
        margin: 100,
        canvas: null,
        bbox: {xl: 0, xr: 800, yt: 0, yb: 800},

        init: function () {
            var me = this;
            this.canvas = document.getElementById('voronoiCanvas');
            this.randomSites();
            this.render();
            $('#upload-btn').show(300);
        },

        randomSites: function () {
            this.sites = [];
            this.diagram = this.voronoi.compute(this.sites, this.bbox);

            var x0 = 0, y0 = 0, r = 0, teta = 0, data = [], a = Math.random() * 30 + 1, b = Math.random() * 2.6 + 1.5, c = Math.floor((Math.random() * 2)) * 2 - 1;
            for (i = 0; i < Math.floor((Math.random() * 50) + 25); i++) {
                r = r + a;
                teta = teta + b * c;
                x = r * Math.cos(teta) + x0;
                y = r * Math.sin(teta) + y0;
                data.push([x, y])
            }
            var xo = this.margin;
            var dx = this.canvas.width - this.margin * 2;
            var yo = this.margin;
            var dy = this.canvas.height - this.margin * 2;
            var palette = palettess[Math.floor((Math.random() * palettess.length))];
            for (var i = 0; i < data.length; i++) {
                this.addSite(self.Math.round(xo + (data[i][0] + r) / (2 * r) * dx),
                        self.Math.round(yo + (data[i][1] + r) / (2 * r) * dy), palette);
            }
        },

        addSite: function (x, y, palette) {
            var sites = this.sites.slice(0);
            sites.push({x: x, y: y});
            var diagram = this.voronoi.compute(sites, this.bbox);
            var site = sites[sites.length - 1];
            var neighbors = diagram.cells[site.voronoiId].getNeighborIds();
            if (neighbors.length < 4) {
                var excludePalette = palette.slice(0), nNeighbors = neighbors.length;
                while (nNeighbors--) {
                    var cell = diagram.cells[neighbors[nNeighbors]];
                    if (cell) {
                        excludePalette = $(excludePalette).filter(function (idx) {
                            return excludePalette[idx] != cell.site.color;
                        });
                    }
                }
                var color = excludePalette[Math.floor((Math.random() * excludePalette.length))];
                this.sites.push({x: x, y: y, color: color});
            }
            this.diagram = this.voronoi.compute(this.sites, this.bbox);
        },

        render: function () {
            var ctx = this.canvas.getContext('2d');
            var mask = new Image();
            var self = this;
            mask.crossOrigin = "controversciences.org";
            mask.src = images[Math.floor((Math.random() * images.length))];
            function loaded() {
                ctx.globalCompositeOperation = 'source-over';
                ctx.clearRect(0, 0, self.canvas.width, self.canvas.height);
                ctx.drawImage(mask, 0, 0, 800, 800);

                ctx.globalCompositeOperation = 'source-atop';
                // background
                ctx.globalAlpha = 1;
                ctx.beginPath();
                ctx.rect(0, 0, self.canvas.width, self.canvas.height);
                ctx.fillStyle = '#fff';
                ctx.fill();
                ctx.strokeStyle = '#000';
                ctx.stroke();
                // voronoi
                if (!self.diagram) {
                    return;
                }
                ctx.strokeStyle = '#000';
                // edges
                var edges = self.diagram.edges,
                        nEdges = edges.length,
                        v;
                if (nEdges) {
                    var edge;
                    ctx.beginPath();
                    while (nEdges--) {
                        edge = edges[nEdges];
                        v = edge.va;
                        ctx.moveTo(v.x, v.y);
                        v = edge.vb;
                        ctx.lineTo(v.x, v.y);
                    }
                    ctx.stroke();
                }
                // highlight cell under mouse
                var sites = self.sites, cell,
                        nSites = sites.length;
                if (!nSites) {
                    return;
                }
                while (nSites--) {
                    site = sites[nSites];
                    cell = self.diagram.cells[site.voronoiId];
                    if (cell) {
                        var halfedges = cell.halfedges,
                                nHalfedges = halfedges.length;
                        if (nHalfedges > 0) {
                            v = halfedges[0].getStartpoint();
                            ctx.beginPath();
                            ctx.moveTo(v.x, v.y);
                            for (var iHalfedge = 0; iHalfedge < nHalfedges; iHalfedge++) {
                                v = halfedges[iHalfedge].getEndpoint();
                                ctx.lineTo(v.x, v.y);
                            }
                            ctx.fillStyle = site.color;
                            ctx.fill();
                        }
                    }
                }
                ctx.fill();
            }

            if (mask.complete) {
                loaded()
            } else {
                mask.addEventListener('load', loaded);
                mask.addEventListener('error', function () {
                    alert('error')
                })
            }
        }
    };
    $(document).ready(function () {
        VoronoiDemo.init();
    });
</script>

<div id="my-container" class="container-fluid">
  <div class="col-xs-12 col-lg-8 col-lg-offset-2">
    <div class="panel panel-default">
      <div class="row">
        <div class="col-xs-12 col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3">
          <% if logged_in? %>
              <br><br>
              <% if logged_in? %>
                  <div class="pull-right">
                    <%= link_to "<span class=\"fat icon-techno\"></span> #{t('views.users.edit')}".html_safe,
                                edit_user_path(current_user.id), class: "cadre hvr-grow" %>
                  </div>
              <% end %>
              <div id="caption">
          <span id="original">
            <%= image_tag UserDetail.find_by(user_id: current_user.id).picture_url, class: "img-rounded", height: "80px" %>
          </span>
              <span style="font-size: 3em">
      &nbsp <%= current_user.name %>
    </span>
              </div>
          <% end %>
          <br>
          <br>

          <div class="panel panel-default">
            <div class="clearfix">
              <div style="margin-top: 5px">
                <% if logged_in? %>
                    <% if current_user.admin %>
                        <button id="upload-btn" type="button" class="btn btn-success pull-right" onclick="UploadPic(true);" style="margin-right: 5px">
                          Attribuer Ã  utilisateur au hasard (admin)<span class="glyphicon glyphicon-ok"></span>
                        </button>
                    <% else %>
                    <button id="upload-btn" type="button" class="btn btn-success pull-right" onclick="UploadPic(false);" style="margin-right: 5px">
                      Enregister comme image de profil <span class="glyphicon glyphicon-ok"></span>
                    </button>
                    <% end %>
                    <div id="progress" class="pull-right" style="display: none">
                      <svg version="1.1" class="loader-like" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="40px" height="40px" viewBox="0 0 50 50" style="enable-background:new 0 0 50 50;" xml:space="preserve">
                        <path fill="#000" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z">
                          <animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite"/>
                        </path>
                      </svg>
                    </div>
                <% end %>
                <button type="button" class="btn btn-primary" onclick="VoronoiDemo.init();" style="margin-left: 5px">
                  <span class="glyphicon glyphicon-refresh"></span> Relancer le gÃ©nÃ©rateur
                </button>
              </div>
            </div>
            <div id="canvasParent" class="center clearfix">
              <noscript>You need to enable Javascript in your browser for this page to display properly.</noscript>
              <div style="margin: 5px">
                <canvas id="voronoiCanvas" class="img-responsive" width="800" height="800"></canvas>
              </div>
              <a id="download" type="button" class="btn btn-success pull-right" style="margin-right: 5px; margin-bottom: 5px">
                <span class="glyphicon glyphicon-save"></span> TÃ©lÃ©charger cet identicon
              </a>
            </div>
          </div>
          <br>
          <br>
        </div>
      </div>
    </div>
  </div>
</div>


<script type="text/javascript">

    function downloadCanvas(link, canvasId, filename) {
        link.href = document.getElementById(canvasId).toDataURL();
        link.download = filename;
    }

    document.getElementById('download').addEventListener('click', function () {
        downloadCanvas(this, 'voronoiCanvas', 'Identicon.png');
    }, false);

    function UploadPic(isAdmin) {

        // Generate the image data
        var canvas = document.getElementById('voronoiCanvas');

        if (canvas.toBlob) {
            canvas.toBlob(
                    function (blob) {
                        // Do something with the blob object,
                        // e.g. creating a multipart form for file uploads:
                        var formData = new FormData();
                        formData.append('file', blob, "Identicon.png");

                        if (isAdmin) {
                            formData.append("admin", "true");
                        }

                        $('#upload-btn').hide();
                        $('#progress').show();

                        var request = new XMLHttpRequest();
                        request.open("POST", "<%= identicon_figures_url + "?profil_picture=true" %>");
                        request.onreadystatechange = function () {
                            if (request.readyState == 4 && request.status == 200) {
                                $('#progress').hide(300);
                                $('#original img').attr("src", jQuery.parseJSON(request.response).picture.url);
                            }
                        };
                        var metaTags = document.getElementsByTagName('meta');
                        for (var i = 0; i < metaTags.length; i++) {
                            if (metaTags[i].name === 'csrf-token') {
                                request.setRequestHeader('X-CSRF-Token', metaTags[i].content);
                            }
                        }
                        request.send(formData);
                    },

                    'image/png'
            );
        }

    }
</script>